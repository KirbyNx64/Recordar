import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

Future<void> initializeNotifications() async {
  tz.initializeTimeZones();
  tz.setLocalLocation(tz.getLocation('America/El_Salvador'));

  print('üåç Zona horaria configurada: ${tz.local}');

  const AndroidInitializationSettings androidInitSettings =
      AndroidInitializationSettings('@mipmap/ic_launcher');

  final InitializationSettings initSettings = InitializationSettings(
    android: androidInitSettings,
  );

  await flutterLocalNotificationsPlugin.initialize(initSettings);

  // Crear canal de notificaci√≥n
  const AndroidNotificationChannel channel = AndroidNotificationChannel(
    'channel_id',
    'Recordatorios',
    description: 'Canal para recordatorios de la app',
    importance: Importance.max,
  );

  final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
      flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>();

  if (androidImplementation != null) {
    await androidImplementation.createNotificationChannel(channel);
  }

  // Solicitar permisos en Android 13+
  if (Platform.isAndroid) {
    await requestExactAlarmPermission();
  }

  // Prueba de notificaci√≥n inmediata despu√©s de la inicializaci√≥n
  print("üîç Probando notificaci√≥n instant√°nea despu√©s de inicializaci√≥n...");
  await testInstantNotification();
}

Future<void> requestExactAlarmPermission() async {
  if (await Permission.notification.isDenied) {
    print("‚ö†Ô∏è Permiso de notificaci√≥n denegado, solicitando...");
    await Permission.notification.request();
  }

  if (await Permission.scheduleExactAlarm.isDenied) {
    print("‚ö†Ô∏è Permiso de alarma exacta denegado, solicitando...");
    await Permission.scheduleExactAlarm.request();
  }

  print("‚úÖ Permisos verificados.");
}

// Funci√≥n para mostrar una notificaci√≥n inmediata
Future<void> mostrarNotificacion() async {
  print("üîî Mostrando notificaci√≥n inmediata...");
  const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
    'channel_id',
    'Recordatorios',
    importance: Importance.max,
    priority: Priority.high,
  );

  const NotificationDetails notificationDetails =
      NotificationDetails(android: androidDetails);

  await flutterLocalNotificationsPlugin.show(
    0,
    'üîî Notificaci√≥n Instant√°nea',
    'Este es un recordatorio inmediato.',
    notificationDetails,
  );
}

// Funci√≥n para programar una notificaci√≥n
Future<void> scheduleNotification(
    int id, String title, String body, DateTime scheduledTime, {int minutosAntes = 5}) async {
  
  tz.initializeTimeZones();
  tz.setLocalLocation(tz.getLocation('America/El_Salvador'));

  DateTime notificationTime = scheduledTime.subtract(Duration(minutes: minutosAntes));

  print('üìÖ Hora programada original: $scheduledTime');
  print('‚è≥ Minutos antes: $minutosAntes');
  print('‚è≥ Hora de notificaci√≥n ajustada: $notificationTime');
  print('üïí Hora actual: ${DateTime.now()}');

  if (notificationTime.isBefore(DateTime.now())) {
    print('‚ö†Ô∏è La notificaci√≥n ya pas√≥. Se cancela la programaci√≥n.');
    return;
  }

  print('üì¢ Intentando programar notificaci√≥n para $notificationTime');

  const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
    'channel_id',
    'Recordatorios',
    importance: Importance.max,
    priority: Priority.high,
  );

  const NotificationDetails notificationDetails =
      NotificationDetails(android: androidDetails);

  await flutterLocalNotificationsPlugin.zonedSchedule(
    id,
    title,
    body,
    tz.TZDateTime.from(notificationTime, tz.local),
    notificationDetails,
    androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
    matchDateTimeComponents: DateTimeComponents.time, // üîπ NUEVO PAR√ÅMETRO CORRECTO
  );

  print('‚úÖ Notificaci√≥n programada con √©xito para: $notificationTime');
}

Future<void> requestNotificationPermission() async {
  print('üîç Solicitando permisos de notificaci√≥n...');
  
  var status = await Permission.notification.status;
  print('üîç Estado actual: $status');

  if (status.isDenied || status.isPermanentlyDenied) {
    print('üõë Permiso denegado, solicit√°ndolo...');
    var newStatus = await Permission.notification.request();
    print('üîÑ Nuevo estado: $newStatus');
  } else {
    print('‚úÖ Permiso ya concedido.');
  }
}

Future<void> testInstantNotification() async {
  print("üîî Enviando notificaci√≥n instant√°nea de prueba...");
  const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
    'channel_id',
    'Recordatorios',
    importance: Importance.max,
    priority: Priority.high,
  );

  const NotificationDetails notificationDetails =
      NotificationDetails(android: androidDetails);

  await flutterLocalNotificationsPlugin.show(
    1000, // ID aleatorio para prueba
    'üîî Notificaci√≥n Instant√°nea',
    'Si ves esto, las notificaciones funcionan.',
    notificationDetails,
  );
}

Future<void> checkPendingNotifications() async {
  final pendingNotifications =
      await flutterLocalNotificationsPlugin.pendingNotificationRequests();
  print('üìå Notificaciones pendientes: $pendingNotifications');
}
